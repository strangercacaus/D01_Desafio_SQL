{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Boas Vindas","text":""},{"location":"#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Este \u00e9 um projeto de Business Intelligence que teve inicio durante o Bootcamp de Data Engineering da How Bootcamps em 2023. Ao longo do tempo inclu\u00ed melhorias de estrutura de projeto e documenta\u00e7\u00e3o.</p>"},{"location":"#objetivo","title":"Objetivo","text":"<p>Este projeto possui 2 objetivos principais:</p> <ul> <li> <p>Explorar o conceito de Conteineriza\u00e7\u00e3o para gest\u00e3o de depend\u00eancias e ambientes virtuais.</p> </li> <li> <p>Criar uma estrutura de BI do zero, implementando um banco de dados e uma ferramenta de BI.</p> </li> </ul>"},{"location":"#tecnologias-utilizadas","title":"Tecnologias Utilizadas","text":"<p>Para a cria\u00e7\u00e3o de tabelas e views de maneira program\u00e1tica foi utilizado Python, assim como para a ingest\u00e3o de dados e inser\u00e7\u00e3o no banco. As bibliotecas utilizadas na rotina foram <code>sqlalchemy</code>, <code>requests</code> e <code>pandas</code></p> <p></p> <p>O banco de dados escolhido para o projeto foi o PostgreSQL em raz\u00e3o de ser Open-Source e amplamente adotado.</p> <p></p> <p>Tamb\u00e9m Open-Source e compat\u00edvel com Docker, o Metabase foi a ferramenta de BI escolhida para a explora\u00e7\u00e3o dos dados do projeto.</p> <p></p> <p>O Docker foi utilizado para a virtualiza\u00e7\u00e3o do ambiente de execu\u00e7\u00e3o.</p> <p></p> <p>O mkdocs foi utilizado para a cria\u00e7\u00e3o desta documenta\u00e7\u00e3o</p>"},{"location":"#layout-do-projeto","title":"Layout do projeto","text":"<pre><code>soccer_results_dashboard\n\u2502   \n\u251c\u2500\u2500 .bi_volume/ - Diret\u00f3rio de armazenamento dos dados do Metabase.\n\u2502\n\u251c\u2500\u2500 mkdocs/ - Arquivos de documenta\u00e7\u00e3o utilizados com o mkdocs\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 mkdocs.yml - O arquivo de configura\u00e7\u00e3o da p\u00e1gina de \n\u2502   \n\u251c\u2500\u2500 documenta\u00e7\u00e3o no mkdocs\n\u2502\n\u251c\u2500\u2500 sql_files/ - Comandos DML para cria\u00e7\u00e3o de tabelas e views.\n\u2502\n\u251c\u2500\u2500 src/\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 main.py - Script de ingest\u00e3o de dados\n\u2502\n\u251c\u2500\u2500 previews/ - Prints do projeto\n\u2502\n\u251c\u2500\u2500 .env - Arquivo com credenciais de acesso ao banco de dados.\n\u2502\n\u251c\u2500\u2500 requirements.txt - Depend\u00eancias do projeto\n\u2502\n\u251c\u2500\u2500 .gitignore - Arquivos ignorados pelo git\n\u2502\n\u251c\u2500\u2500 docker-compose.yml - Arquivo de configura\u00e7\u00e3o do ambiente do Docker\n\u2502\n\u2514\u2500\u2500 README.md - O arquivo que voc\u00ea est\u00e1 lendo agora.\n</code></pre>"},{"location":"Previews/","title":"Previews","text":""},{"location":"Previews/#provisionamento-de-banco-de-dados-com-docker","title":"Provisionamento de Banco de Dados com Docker","text":"<p>Utilizando o Docker, \u00e9 criado um container contendo a imagem do postgres e metabase, vinculados como servi\u00e7os.</p> <p></p> <p></p>"},{"location":"Previews/#extracao-e-carregamento-de-dados","title":"Extra\u00e7\u00e3o e Carregamento de Dados","text":"<p>O projeto conta com um script Python que realiza a cria\u00e7\u00e3o de tabelas numa inst\u00e2ncia do PostgreSQL, al\u00e9m do download e inser\u00e7\u00e3o de 3 arquivos CSV armazenados no Github.</p> <p></p>"},{"location":"Previews/#modelagem-e-calculo-de-dados","title":"Modelagem e C\u00e1lculo de Dados","text":"<p>Os dados carregados s\u00e3o modelados utilizando views de banco de dados e perguntas no formato nativo e em SQL no Metabase.</p> <p></p> <p></p>"},{"location":"Previews/#criacao-de-dashboard","title":"Cria\u00e7\u00e3o de Dashboard","text":"<p>Os resultados das perguntas s\u00e3o organizados em um dashboard filtr\u00e1vel no Metabase</p> <p></p>"},{"location":"Previews/#pagina-de-documentacao","title":"P\u00e1gina de Documenta\u00e7\u00e3o","text":"<p>Uma p\u00e1gina de documenta\u00e7\u00e3o online foi gerada para o projeto, utilizando o pacote mkdocs para o Python</p> <p></p>"},{"location":"Setup/","title":"Setup","text":""},{"location":"Setup/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do ambiente","text":""},{"location":"Setup/#1-faca-o-download-do-github-desktop","title":"1. Fa\u00e7a o download do Github Desktop:","text":""},{"location":"Setup/#_1","title":"Setup","text":""},{"location":"Setup/#2-realize-o-pull-das-imagens","title":"2. Realize o pull das imagens:","text":"<p><pre><code>docker pull metabase/metabase\ndocker pull postgres\n</code></pre> O download das imagens tamb\u00e9m pode ser feito atrav\u00e9s do aplicativo do Docker desktop</p>"},{"location":"Setup/#3-certifique-se-de-que-as-imagens-baixadas-foram-identificadas-pelo-docker","title":"3. Certifique-se de que as imagens baixadas foram identificadas pelo docker","text":"<p><pre><code>docker image ls\n</code></pre> Output Exemplo: <pre><code>REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE\nmetabase/metabase             latest    2b600465cfbe   2 weeks ago    484MB\npostgres                      latest    96f08c06113e   6 weeks ago    438MB\n</code></pre></p>"},{"location":"Setup/#4-crie-e-execute-um-container-com-as-imagens-utilizando-o-docker-compose","title":"4. Crie e execute um container com as imagens utilizando o Docker-Compose","text":"<p><pre><code>docker-compose up -d\n</code></pre> \u00c9 poss\u00edvel especificar o servi\u00e7o desejado contido no docker-compose.yml ap\u00f3s o comando up, neste caso vamos subir um container com ambos os servi\u00e7os</p>"},{"location":"Setup/#5-exibir-os-containers-ativos","title":"5. Exibir os containers ativos","text":"<p><pre><code>docker ps\n</code></pre> Output: <pre><code>CONTAINER ID   IMAGE               COMMAND                  CREATED        STATUS          PORTS                    NAMES\na24fdf0e24ba   metabase/metabase   \"/app/run_metabase.sh\"   14 hours ago   Up 6 seconds    0.0.0.0:3000-&gt;3000/tcp   desafio-resultados-do-futebol-eng-de-dados-bi-1\n4c609ec470be   postgres            \"docker-entrypoint.s\u2026\"   14 hours ago   Up 42 minutes   0.0.0.0:5432-&gt;5432/tcp   pg_container\n</code></pre></p>"},{"location":"Setup/#6-parar-um-container","title":"6. Parar um container","text":"<pre><code>docker stop &lt;container_id&gt;\n</code></pre>"},{"location":"Setup/#7-criar-um-ambiente-virtual-venv","title":"7. Criar um ambiente virtual <code>venv</code>.","text":"<p><pre><code>python3 -m venv env\n</code></pre> Certifique-se de estar localizado na pasta raiz do projeto no momento da cria\u00e7\u00e3o do ambiente virtual</p>"},{"location":"Setup/#8-ative-o-ambiente-virtual","title":"8. Ative o ambiente virtual.","text":"<p><pre><code>source env/bin/activate\n</code></pre> ** Assim que o ambiente virtual for ativado, o terminal anternar\u00e1 o valor exibido entre par\u00eanteses de <code>base</code> para <code>env</code>, como no exemplo: <pre><code>(base) 192:Desafio-Resultados-do-Futebol-Eng.-de-Dados user$ source env/bin/activate\n(env) (base) 192:Desafio-Resultados-do-Futebol-Eng.-de-Dados user$\n</code></pre></p>"},{"location":"Setup/#9-instale-os-pacotes-listados-no-arquivo-requirementstxt","title":"9. Instale os pacotes listados no arquivo <code>requirements.txt</code>.","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"Setup/#10-execute-o-script-srcmainpy","title":"10.  Execute o Script <code>src/main.py</code>","text":"<p>Com os containers ativos, j\u00e1 \u00e9 poss\u00edvel utilizar o script main.py, que ir\u00e1 criar as tabelas descritas nos comandos SQL, obter 3 arquivos CSV do Dataset localizado no Github e inseri-los nas tabelas do Banco de Dados.</p> <pre><code>python3 src/main.py\n</code></pre> <p>Os acessos para o banco de dados s\u00e3o configurados no arquivo docker-compose e s\u00e3o os seguintes:</p>"},{"location":"Setup/#11-acesso-ao-banco-de-dados","title":"11. Acesso ao Banco de Dados","text":"<p><code>Host:</code> <pre><code>0.0.0.0 ou localhost\n</code></pre> <code>Porta:</code> <pre><code>5432\n</code></pre> <code>Database:</code> <pre><code>test_db\n</code></pre> <code>User:</code> <pre><code>root\n</code></pre> <code>Senha:</code> <pre><code>root\n</code></pre></p>"},{"location":"Setup/#12-accessar-o-metabase","title":"12. Accessar o Metabase:","text":"<p>Com as tabelas criadas, uma s\u00e9rie de perguntas e queries personalizadas para os dados obtidos j\u00e1 estar\u00e3o dispon\u00edveis no metabase.</p> <p><code>URL:</code> <pre><code>localhost::3000\n</code></pre></p>"},{"location":"Setup/#credenciais","title":"Credenciais:","text":"<p><code>E-mail:</code> <pre><code>admin@provider.com\n</code></pre> <code>Senha:</code> <pre><code>since2008\n</code></pre></p> <p>ATEN\u00c7\u00c3O:</p> <p>Caso o Metabase solicite a cria\u00e7\u00e3o de um novo usu\u00e1rio e a configura\u00e7\u00e3o manual da conex\u00e3o com o PostgreSQL, utilize a sigla 'db' no lugar do HOST.</p> <p>Este detalhe \u00e9 necess\u00e1rio pois o Metabase e PostgreSQL est\u00e3o no mesmo conteiner, o HOST neste caso \u00e9 identificado pelo nome do servi\u00e7o definido no arquivo dockerfile.yml</p>"}]}